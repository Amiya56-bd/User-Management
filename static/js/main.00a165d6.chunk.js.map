{"version":3,"sources":["App.js","config.js","serviceWorker.js","index.js"],"names":["App","useState","user","setUser","modal","setModal","modalData","setModalData","Date","dateTime","setDateTime","fliterData","setfilterData","useEffect","fetch","then","res","json","data","console","log","className","scope","map","i","key","real_name","tz","onClick","activity_periods","modalFunc","style","width","selected","onChange","selecteddate","newdate","toString","slice","result","filter","start_time","includes","showYearDropdown","scrollableMonthYearDropdown","end_time","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00a165d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {API_URL} from './config';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst App =()=> {\n\n  const [user, setUser] = useState([]);\n  const[modal,setModal]=useState(false);\n  const[modalData,setModalData]=useState({});\n  const [dateTime, setDateTime] = useState(new Date());\n  const[fliterData,setfilterData]=useState(null);\n\n\n\n\n  const modalFunc=(data)=>{\n     setModal(true)\n     setModalData(data.activity_periods)\n  }\n\n\n  const handleDate = selecteddate => {\n    setDateTime(selecteddate)\n    let newdate=selecteddate.toString().slice(4,8)\n    let result = modalData.filter(data => data.start_time.includes(newdate));\n    setfilterData(result)\n    console.log('result', result)\n  };\n  \n \n  \n\n    useEffect(()=>{\n      fetch(`${API_URL}members`).then(res=>res.json()).then(data=>{\n        setUser(data);\n        console.log('data', data)\n      })\n        },[]);\n\n  return (\n    <>\n    <section className=\"main\">\n            <div className=\"box\">\n              <h3 className=\"p-2\">USER INFO</h3>\n            <table className=\"table table-striped table-dark\">\n     <thead>\n         <tr>\n           <th scope=\"col\">SN</th>\n           <th scope=\"col\">Name</th>\n           <th scope=\"col\">Location</th>\n           <th scope=\"col\">Details</th>\n         </tr>\n     </thead>\n    <tbody>\n     {\n       user.map((data,i)=>{\n         return(\n          <tr key={i}>\n          <th scope=\"row\">{i + 1}</th>\n          <td>{data.real_name}</td>\n          <td>{data.tz}</td>\n          <td><button onClick={()=>modalFunc(data)} className=\"btn btn-success\">Deatils</button></td>\n        </tr>\n         )\n       })\n     }\n   \n    </tbody>\n</table>\n            </div>\n  {\n     modal?\n     <section className=\"main\" style={{\"background\":\"rgba(0,0,0,0.8)\",width:\"100%\",\"height\":\"100vh\",\n     \"position\":\"absolute\",\"top\":\"0\",\"left\":\"0\"}}>\n       \n       \n        <div className=\"modalbox\">\n          <div className=\"p-2\">\n               <span><b>Filter: </b></span>\n               <DatePicker\n                 selected={dateTime}\n                 onChange={handleDate}\n                 showYearDropdown\n                 scrollableMonthYearDropdown\n                 />\n          </div>\n        <table className=\"table table-striped table-dark\">\n     <thead>\n         <tr>\n           <th scope=\"col\">SN</th>\n           <th scope=\"col\">Date </th>\n           <th scope=\"col\">starting Time</th>\n           <th scope=\"col\">Ending Time</th>\n           \n         </tr>\n     </thead>\n    <tbody>\n     {\n       fliterData?fliterData.map((data,i)=>{\n         return(\n          <tr key={i}>\n          <th scope=\"row\">{i + 1}</th>\n          <td>{data.start_time.slice(0,11)}</td>\n          <td>{data.start_time.slice(11)}</td>\n          <td>{data.end_time.slice(11)}</td>\n        </tr>\n         )\n       })\n       :modalData?modalData.map((data,i)=>{\n        return(\n         <tr key={i}>\n         <th scope=\"row\">{i + 1}</th>\n         <td>{data.start_time.slice(0,11)}</td>\n         <td>{data.start_time.slice(11)}</td>\n         <td>{data.end_time.slice(11)}</td>\n       </tr>\n        )\n      }):null\n     }\n   \n    </tbody>\n</table>\n        </div>\n        <button style={{\"position\":\"absolute\",\"top\":\"5px\",\"right\":\"5px\",\"color\":\"white\",\"fontSize\":\"30px\"}} className=\"btn1\" onClick={()=>{\n          setModal(false)\n          setfilterData(null)\n        }}>\n            <i className=\"far fa-times-circle\"></i>\n           </button>\n     </section>\n     :null\n  }\n     </section>\n    </>\n  );\n}\n\nexport default App;\n","\r\n\r\nconst API_URL = 'http://localhost:4000/';\r\n\r\nexport {\r\n  API_URL\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}